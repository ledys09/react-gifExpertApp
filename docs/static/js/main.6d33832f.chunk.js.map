{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OAEI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC/BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OAEpCN,EAAc,MAMlB,SACI,uBACIO,KAAQ,OACRC,MAAUT,EACVU,SAlBc,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,a,+BCL/CG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAETC,EAFS,0FAEgFC,UAAUH,GAF1F,sBAGII,MAAMF,GAHV,cAGTG,EAHS,gBAIMA,EAAKC,OAJX,uBAIRC,EAJQ,EAIRA,KAEDC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAV3B,kBAeRM,GAfQ,4CAAH,sDCDPO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACjC,OACI,sBAAKc,UAAW,OAAhB,UACI,qBAAKC,IAAMf,EAAKgB,IAAMN,IACtB,4BAAKA,QCAJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHb,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAoBxC,OAdAC,qBAAY,WAERxB,EAASC,GACJwB,MAAM,SAAAC,GAECH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAK1B,CAACpB,IAEGqB,EDfmBK,CAAa1B,GAA/BO,EAF6B,EAE7BA,KAAMa,EAFuB,EAEvBA,QAEd,OACI,qCACI,qBAAIJ,UAAU,0CAAd,cAA2DhB,KAGvDoB,GAAW,mBAAGJ,UAAW,oCAAd,uBAGlB,qBAAKA,UAAW,YAAhB,SAGWT,EAAKE,KAAM,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADIA,EAAIC,aEnB3BgB,EAAe,WAAM,MAIMzC,mBAAS,CAAC,gBAJhB,mBAIvB0C,EAJuB,KAIX3C,EAJW,KAY9B,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAYA,GADLA,Y,MCpBnC6B,IAASC,OACT,cAAE,EAAF,IACAC,SAASC,eAAe,W","file":"static/js/main.6d33832f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => setInputValue(e.target.value);\r\n    //console.log(e.target.value) \r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2){\r\n        setCategories( cats => [ inputValue, ...cats]); \r\n                            // [...cats, inputValue]) si quiero que aparezca la nueva cat al final\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n     \r\n        <form onSubmit = { handleSubmit }>\r\n            <input \r\n                type  = \"text\"\r\n                value = { inputValue }\r\n                onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n   \r\n    );\r\n  \r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\nexport const getGifs = async ( category ) => {\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?api_key=FBj93CYhC4W9MKw4858Ycyhcn7OA7s3v&q=${encodeURI(category)}&limit=10`;\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n\r\n        const gifs = data.map ( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n\r\n    // console.log(gifs);\r\n        return gifs;\r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title, url}) => {\r\n    return (\r\n        <div className= \"card\">\r\n            <img src= {url} alt= {title}></img>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    \r\n    const { data, loading } = useFetchGifs(category);\r\n    //console.log(loading);\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__jackInTheBox\"> { category }</h3>\r\n            {\r\n                // loading ? 'Cargando...': 'Data cargada' (otra forma)\r\n                loading && <p className= \"animate__animated animate__bounce\"> Loading </p>\r\n               \r\n            }\r\n        {<div className= \"card-grid\">\r\n        \r\n                {\r\n                    data.map ( img =>(\r\n                        <GifGridItem \r\n                            key = { img.id }\r\n                            {...img} /> // {...props} el spread, es para pasar las propiedades de las imagenes,\r\n                     ))                 //sin pasar uno por uno y poder destructurar en el componente.\r\n                }  \r\n        </div>}\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n//2263-5711 rodrigo cantero\r\n    useEffect ( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });              \r\n           \r\n        })\r\n\r\n    }, [category])\r\n\r\n    return state; //{ data: [], loading: true}\r\n}\r\n\r\n        \r\n    // //Ejecuta el componente (única vez) cuando éste es renderizado por primera vez. \r\n    // useEffect ( () => {\r\n    //     getGifs(category)\r\n    //     //si la función manda el mismo y único argumento \r\n    //     //puedo hacer esto .then(setImages);(se entiende que setImages puede ser cualquier función)\r\n    //     //en vez de esto .then( data => setImages(data);)\r\n    //         .then( setImages );\r\n    // }, [ category ]) //agregando la dependencia en el useEffect (warning) solo ejecuta si la cat cambia\r\n","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n\r\n    const [categories, setCategories] = useState(['Dragon Ball']);\r\n\r\n   // const handleAdd = () => {\r\n   //     setCategories([...categories, 'HunterXHunter']);\r\n        //si lo quiero al inicio\r\n        //setCategories(['HunterXHunter', ...categories]);\r\n   // }\r\n\r\n    return ( \r\n        <>\r\n            <h2> GifExpertApp </h2> \r\n            <AddCategory setCategories = { setCategories } />\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category =>  (\r\n                        <GifGrid \r\n                            key = {category}\r\n                            category = {category} \r\n                        />\r\n                    )\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { GifExpertApp } from \"./GifExpertApp\";\r\nimport \"./index.css\";\r\n\r\n\r\nReactDOM.render( \r\n< GifExpertApp / > , \r\ndocument.getElementById(\"root\")\r\n);"],"sourceRoot":""}